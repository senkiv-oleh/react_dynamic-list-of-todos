{"version":3,"sources":["components/TodoList/TodoList.jsx","components/api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","query","handleQueryChange","event","setState","target","value","prevProps","prevState","this","props","queryUpdate","todos","selectUser","setCompletedStatus","className","fotHtml","id","type","onChange","map","todo","classNames","completed","readOnly","title","onClick","userId","React","Component","API_URL","getUser","fetch","then","response","json","CurrentUser","user","a","selectedUserId","data","name","email","phone","App","completedStatus","status","normalizeQuery","toLowerCase","trim","visibleTodos","filter","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0f56184e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.query !== this.state.query) {\n      this.props.queryUpdate(this.state.query);\n    }\n  }\n\n  handleQueryChange = (event) => {\n    this.setState(\n      { query: event.target.value },\n    );\n  };\n\n  render() {\n    const { todos, selectUser, setCompletedStatus } = this.props;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__filter-form\">\n          <label fotHtml=\"bytitle\">\n            {`Filter by title  `}\n            <input\n              id=\"bytitle\"\n              type=\"text\"\n              onChange={this.handleQueryChange}\n            />\n          </label>\n          <label fotHtml=\"bytitle\">\n            {`   Filter by completed  `}\n            <select\n              className=\"TodoList__filter-completed\"\n              onChange={event => setCompletedStatus(event.target.value)}\n            >\n              <option value=\"All\">All</option>\n              <option value=\"Completed\">Completed</option>\n              <option value=\"Active\">Active</option>\n            </select>\n          </label>\n        </div>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos.map(todo => (\n              <li\n                className={classNames(`TodoList__item `,\n                  { 'TodoList__item--checked': todo.completed },\n                  { 'TodoList__item--unchecked': !todo.completed })\n                }\n              >\n                <label>\n                  <input type=\"checkbox\" readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => {\n                    selectUser(todo.userId);\n                  }}\n                >\n                  {`User #${(todo.userId !== null) ? todo.userId : 0}`}\n\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.string.isRequired,\n  }).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  setCompletedStatus: PropTypes.func.isRequired,\n  queryUpdate: PropTypes.func.isRequired,\n};\n","/* eslint-disable max-len */\nconst API_URL = `https://mate-api.herokuapp.com`;\n\nexport const getTodos = () => fetch(`${API_URL}/todos`)\n  .then(response => response.json());\n\nexport const getUser = userId => fetch(`${API_URL}/users/${userId}`)\n  .then(response => response.json());\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { getUser } from '../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  async componentDidMount() {\n    const user = await getUser(this.props.selectedUserId);\n\n    this.setState({\n      user: user.data,\n    });\n  }\n\n  async componentDidUpdate(prevProps) {\n    if (prevProps.selectedUserId !== this.props.selectedUserId) {\n      const user = await getUser(this.props.selectedUserId);\n\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ user: user.data });\n    }\n  }\n\n  render() {\n    const { user } = this.state;\n    const { selectUser } = this.props;\n\n    if (!user) {\n      return 'fnfn';\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${user.id}`}</span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          className=\"\n            CurrentUser__clear\n          \"\n          type=\"button\"\n          onClick={() => {\n            selectUser(0);\n          }}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  selectUser: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.string.isRequired,\n  }).isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './components/api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    query: '',\n    completedStatus: '',\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({\n      todos: todos.data,\n    });\n  }\n\n  queryUpdate = (value) => {\n    this.setState({ query: value });\n  };\n\n  setCompletedStatus = (status) => {\n    this.setState({ completedStatus: status });\n  }\n\n  render() {\n    const { todos, selectedUserId, query, completedStatus } = this.state;\n    const normalizeQuery = query.toLowerCase().trim();\n\n    let visibleTodos = todos.filter(\n      todo => ((todo.title != null)\n        ? todo.title.toLowerCase().includes(normalizeQuery) : todo.title),\n    );\n\n    switch (completedStatus) {\n      case 'Active':\n        visibleTodos = [...todos].filter(({ completed }) => !completed);\n        break;\n      case 'Completed':\n        visibleTodos = [...todos].filter(({ completed }) => completed);\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={visibleTodos}\n            queryUpdate={this.queryUpdate}\n            setCompletedStatus={this.setCompletedStatus}\n            selectUser={(userId) => {\n              this.setState({ selectedUserId: userId });\n            }}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                selectUser={(userId) => {\n                  this.setState({ selectedUserId: userId });\n                }}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}