{"version":3,"sources":["components/TodoList/TodoList.jsx","components/api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","titleQuery","prevProps","prevState","this","props","updateSearchTitle","todos","selectUser","updateSearchTodoStatus","selectedUserId","className","fotHtml","id","type","onChange","event","setState","target","value","map","todo","classNames","completed","readOnly","title","userId","onClick","React","Component","API_URL","getUser","fetch","then","response","json","CurrentUser","user","a","data","name","email","phone","App","searchTitle","searchTodoStatus","status","visibleTodos","normalizeQuery","toLowerCase","trim","filter","includes","ReactDOM","render","document","getElementById"],"mappings":"2YAMaA,G,MAAb,4MACEC,MAAQ,CACNC,WAAY,IAFhB,wDAKE,SAAmBC,EAAWC,GACxBA,EAAUF,aAAeG,KAAKJ,MAAMC,YACtCG,KAAKC,MAAMC,kBAAkBF,KAAKJ,MAAMC,cAP9C,oBAWE,WAAU,IAAD,OACP,EAKIG,KAAKC,MAJPE,EADF,EACEA,MACAC,EAFF,EAEEA,WACAC,EAHF,EAGEA,uBACAC,EAJF,EAIEA,eAGF,OACE,yBAAKC,UAAU,YACb,sCACA,yBAAKA,UAAU,yBACb,2BAAOC,QAAQ,WAAf,uBAGE,2BACEC,GAAG,UACHC,KAAK,OACLC,SAAU,SAACC,GACT,EAAKC,SAAS,CAAEhB,WAAYe,EAAME,OAAOC,YAI/C,2BAAOP,QAAQ,eAAf,2BAGE,4BACEC,GAAG,cACHF,UAAU,6BACVI,SAAU,SAAAC,GAAK,OAAIP,EAAuBO,EAAME,OAAOC,SAEvD,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,UAAd,aAIN,yBAAKR,UAAU,4BACb,wBAAIA,UAAU,kBACXJ,EAAMa,KAAI,SAAAC,GAAI,OACb,wBACEV,UAAWW,IAAW,kBACpB,CAAE,0BAA2BD,EAAKE,WAClC,CAAE,6BAA8BF,EAAKE,aAGvC,+BACE,2BAAOT,KAAK,WAAWU,UAAQ,IAC/B,2BAAIH,EAAKI,QAGX,4BACEd,UAAWW,IAAW,+BACpB,CAAE,kCACAD,EAAKK,SAAWhB,IACpBI,KAAK,SACLa,QAAS,WACPnB,EAAWa,EAAKK,UANpB,gBAS6B,OAAhBL,EAAKK,OAAmBL,EAAKK,OAAS,eAvEnE,GAA8BE,IAAMC,YCL9BC,G,MAAO,kCAKAC,EAAU,SAAAL,GAAM,OAAIM,MAAM,GAAD,OAAIF,EAAJ,kBAAqBJ,IACxDO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WCFhBC,EAAb,4MACEpC,MAAQ,CACNqC,KAAM,IAFV,8FAKE,4BAAAC,EAAA,sEACqBP,EAAQ3B,KAAKC,MAAMK,gBADxC,OACQ2B,EADR,OAGEjC,KAAKa,SAAS,CACZoB,KAAMA,EAAKE,OAJf,gDALF,6HAaE,WAAyBrC,GAAzB,eAAAoC,EAAA,yDACMpC,EAAUQ,iBAAmBN,KAAKC,MAAMK,eAD9C,gCAEuBqB,EAAQ3B,KAAKC,MAAMK,gBAF1C,OAEU2B,EAFV,OAKIjC,KAAKa,SAAS,CAAEoB,KAAMA,EAAKE,OAL/B,gDAbF,2EAsBE,WACE,IAAQF,EAASjC,KAAKJ,MAAdqC,KACA7B,EAAeJ,KAAKC,MAApBG,WAER,OAAK6B,EAKH,yBAAK1B,UAAU,eACb,wBAAIA,UAAU,sBACZ,uDAAyB0B,EAAKxB,MAGhC,wBAAIF,UAAU,qBAAqB0B,EAAKG,MACxC,uBAAG7B,UAAU,sBAAsB0B,EAAKI,OACxC,uBAAG9B,UAAU,sBAAsB0B,EAAKK,OACxC,4BACE/B,UAAU,uBAGVG,KAAK,SACLa,QAAS,WACPnB,EAAW,KANf,UAZK,WA3Bb,GAAiCoB,IAAMC,WCsFxBc,E,4MAnFb3C,MAAQ,CACNO,MAAO,GACPG,eAAgB,EAChBkC,YAAa,GACbC,iBAAkB,I,EAWpBvC,kBAAoB,SAACa,GACnB,EAAKF,SAAS,CAAE2B,YAAazB,K,EAG/BV,uBAAyB,SAACqC,GACxB,EAAK7B,SAAS,CAAE4B,iBAAkBC,K,EAGpCC,aAAe,SAACxC,GACd,MAA0C,EAAKP,MAAvC4C,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,iBAEfG,EAAiBJ,EAAYK,cAAcC,OAE7CH,EAAY,YAAOxC,GAEvB,OAAQsC,GACN,IAAK,SACHE,EAAeA,EAAaI,QAAO,qBAAG5B,aACtC,MACF,IAAK,YACHwB,EAAeA,EAAaI,QAAO,qBAAG5B,aAW1C,OALAwB,EAAeA,EAAaI,QAC1B,SAAA9B,GAAI,OAAoB,MAAdA,EAAKI,MACXJ,EAAKI,MAAMwB,cAAcG,SAASJ,GAAkB3B,EAAKI,U,8FApCjE,4BAAAa,EAAA,sEFZ4BN,MAAM,GAAD,OAAIF,EAAJ,WAChCG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UEW3B,OACQ5B,EADR,OAGEH,KAAKa,SAAS,CACZV,MAAOA,EAAMgC,OAJjB,gD,0EA0CA,WAAU,IAAD,OACP,EAAkCnC,KAAKJ,MAA/BO,EAAR,EAAQA,MAAOG,EAAf,EAAeA,eAEf,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEJ,MAAOH,KAAK2C,aAAaxC,GACzBG,eAAgBA,EAChBJ,kBAAmBF,KAAKE,kBACxBG,uBAAwBL,KAAKK,uBAC7BD,WAAY,SAACkB,GACX,EAAKT,SAAS,CAAEP,eAAgBgB,QAKtC,yBAAKf,UAAU,gBACb,yBAAKA,UAAU,0BACZD,EACC,kBAAC,EAAD,CACEA,eAAgBA,EAChBF,WAAY,SAACkB,GACX,EAAKT,SAAS,CAAEP,eAAgBgB,OAGlC,0B,GA5EEE,IAAMC,WCHxBwB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.162574a0.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    titleQuery: '',\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.titleQuery !== this.state.titleQuery) {\n      this.props.updateSearchTitle(this.state.titleQuery);\n    }\n  }\n\n  render() {\n    const {\n      todos,\n      selectUser,\n      updateSearchTodoStatus,\n      selectedUserId,\n    } = this.props;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__filter-form\">\n          <label fotHtml=\"bytitle\">\n            Filter by title\n            {`  `}\n            <input\n              id=\"bytitle\"\n              type=\"text\"\n              onChange={(event) => {\n                this.setState({ titleQuery: event.target.value });\n              }}\n            />\n          </label>\n          <label fotHtml=\"bycompleted\">\n            Filter by completed\n            {`  `}\n            <select\n              id=\"bycompleted\"\n              className=\"TodoList__filter-completed\"\n              onChange={event => updateSearchTodoStatus(event.target.value)}\n            >\n              <option value=\"All\">All</option>\n              <option value=\"Completed\">Completed</option>\n              <option value=\"Active\">Active</option>\n            </select>\n          </label>\n        </div>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos.map(todo => (\n              <li\n                className={classNames(`TodoList__item `,\n                  { 'TodoList__item--checked': todo.completed },\n                  { 'TodoList__item--unchecked': !todo.completed })\n                }\n              >\n                <label>\n                  <input type=\"checkbox\" readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames(`TodoList__user-button button`,\n                    { 'TodoList__user-button--selected':\n                      todo.userId === selectedUserId })}\n                  type=\"button\"\n                  onClick={() => {\n                    selectUser(todo.userId);\n                  }}\n                >\n                  {`User #${(todo.userId !== null) ? todo.userId : 0}`}\n\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.string.isRequired,\n  }).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  updateSearchTodoStatus: PropTypes.func.isRequired,\n  updateSearchTitle: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","/* eslint-disable max-len */\nconst API_URL = `https://mate-api.herokuapp.com`;\n\nexport const getTodos = () => fetch(`${API_URL}/todos`)\n  .then(response => response.json());\n\nexport const getUser = userId => fetch(`${API_URL}/users/${userId}`)\n  .then(response => response.json());\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { getUser } from '../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  async componentDidMount() {\n    const user = await getUser(this.props.selectedUserId);\n\n    this.setState({\n      user: user.data,\n    });\n  }\n\n  async componentDidUpdate(prevProps) {\n    if (prevProps.selectedUserId !== this.props.selectedUserId) {\n      const user = await getUser(this.props.selectedUserId);\n\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ user: user.data });\n    }\n  }\n\n  render() {\n    const { user } = this.state;\n    const { selectUser } = this.props;\n\n    if (!user) {\n      return 'fnfn';\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${user.id}`}</span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          className=\"\n            CurrentUser__clear\n          \"\n          type=\"button\"\n          onClick={() => {\n            selectUser(0);\n          }}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  selectUser: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.string.isRequired,\n  }).isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './components/api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    searchTitle: '',\n    searchTodoStatus: '',\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({\n      todos: todos.data,\n    });\n  }\n\n  updateSearchTitle = (value) => {\n    this.setState({ searchTitle: value });\n  };\n\n  updateSearchTodoStatus = (status) => {\n    this.setState({ searchTodoStatus: status });\n  }\n\n  visibleTodos = (todos) => {\n    const { searchTitle, searchTodoStatus } = this.state;\n\n    const normalizeQuery = searchTitle.toLowerCase().trim();\n\n    let visibleTodos = [...todos];\n\n    switch (searchTodoStatus) {\n      case 'Active':\n        visibleTodos = visibleTodos.filter(({ completed }) => !completed);\n        break;\n      case 'Completed':\n        visibleTodos = visibleTodos.filter(({ completed }) => completed);\n        break;\n      default:\n        break;\n    }\n\n    visibleTodos = visibleTodos.filter(\n      todo => ((todo.title != null)\n        ? todo.title.toLowerCase().includes(normalizeQuery) : todo.title),\n    );\n\n    return visibleTodos;\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={this.visibleTodos(todos)}\n            selectedUserId={selectedUserId}\n            updateSearchTitle={this.updateSearchTitle}\n            updateSearchTodoStatus={this.updateSearchTodoStatus}\n            selectUser={(userId) => {\n              this.setState({ selectedUserId: userId });\n            }}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                selectUser={(userId) => {\n                  this.setState({ selectedUserId: userId });\n                }}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}